how to setup encoder as counter
In galil side, it need to set encoder as pulse and direction CE=5. Also
set MT=1 as a servo so that the encoder can have higher frequency 23Mhz?
need a script as following
InteTime
#ECOUNTS
CE~a=5
Finish=0
DE~a=0;		'set encoder to zero
WT ITime;	'integration time
Counts= _TD~a;	'read encoder counts
Finish=1;	'ready to read from the program
EN
///////////////////////////////////////////////////////////////////////
In Bluice side

1) in config file add

galil3.encoder=ion_chamber3 7 1 ECOUNTER //new parameter just like RELATIVE
........
//////////////////////////////////////////////////////////////////////
2) In dat file add

ion_chamber3
12
galil2 ion_chamber3
0 1 1 1 1
0 1 1 1 1

ion_chamber3_op
11
self ion_chamber3_op
0 1 1 1 1
0 1 1 1 1

i3
4
self ion_chamber3_op 0 rtc1 standardVirtualIonChamber
0 1 1 1 1
0 1 1 1 1

//////////////////////////////////////////////////////////////////////////
4) add counter1_op.tcl script in the ../dcss/scripts/operations

#ion_chamber3_op.tcl
proc ion_chamber3_op_initialize {} {
}

#in this function, pay attention on 1) gDevice($encoder,status), it can not
#replace $encoder with "ion_chamber3" directly. 2) the status of the $encoder 
#is always set to "calibrating" after each set_encoder called. so here we need
#to change the status to "inactive" so that we can use get_encoder to get the
value.

proc ion_chamber3_op_start { time_in_second } {
    ####set counter integration time
    set itime [expr $time_in_second*1000]
    set encoder ion_chamber3
    set gDevice($encoder,status) inactive
    set_encoder ion_chamber3 $itime
    wait_for_encoder ion_chamber3

    #get the counts from the encoder
    get_encoder ion_chamber3
    set encoderValue [wait_for_encoder ion_chamber3]
    return [expr $encoderValue]

}
///////////////////////////////////////////////////////////////////////////
5) In dhs/src/dhs_dmc2180.cc

Add the following
       } else if ( strcmp(encoderTypeStr,"COUNTER") == 0 ) {
         encoder = &dmc2180.counterEncoder	

In dmc2180API.h file add the followings

#define DMC2180_MAX_COUNTER_ENCODERS 8

class Dmc2180CounterEncoder : public  Dmc2180_encoder {
   public:
   xos_result_t         get_current_position( dcs_scaled_t * position);
   xos_result_t         set_position( dcs_scaled_t new_position );
   };

Dmc2180CounterEncoder counterEncoder[DMC2180_MAX_COUNTER_ENCODERS]


//////////////////////////////////////////////////////////////////////////
6) in dhs/src/dmc2180API.cc add the following functions

// This function setup the integration time of the counter
xos_result_t Dmc2180CounterEncoder::set_position(dcs_scaled_t newPosition) {
        /* local variables */
        int error_code;
	int IntegrationTime;

	IntegrationTime = *newPosition;
        LOG_INFO1("Yangx Integration Time : %d\n",IntegrationTime);

        sprintf(command, "InteTime=%d", IntegrationTime);
        /* construct and send message to dmc2180 */
        controller_execute(command, &error_code, FALSE );

        LOG_INFO1("error_code: %d\n",error_code);

        /* check for errors */
        if (error_code != 0) {
                LOG_WARNING1("error_code: %d\n",error_code);

                /* report failure */
                return XOS_FAILURE;
        }

        /* report success */
        return XOS_SUCCESS;
}

#include <unistd.h>
// This function read the encounder counts from the script
s_result_t Dmc2180CounterEncoder::get_current_position(dcs_scaled_t * position) {

        LOG_INFO("Entering counter encoder\n");
        int error_code;
	long counts;

       // get position of axis 
       // sprintf(command, "TP%c", axisLabel);

//        controller_execute("XQ #COUNTS, 1", &error_code, FALSE );
 	sprintf(command, "~a=\"%c\";""XQ #ECounts,2", axisLabel);
        *position = (dcs_scaled_t) 100;
        controller_execute(command, &error_code, FALSE );

        if (error_code == 0) {
		//Chech to see if it finish counting
		do {
			usleep(10000);
			controller_execute("MG Finish", &error_code, FALSE);
			sscanf(lastResponse, "%d", &finished);
		}while(!finished)
		// get the counts
		controller_execute("MG Counts", &error_code, FALSE);
		sscanf(lastResponse, "%ld", &counts);
                *position = (dcs_scaled_t) counts;
        } else {
                LOG_WARNING("Error getting current position\n");
                return XOS_FAILURE;
        }
        return XOS_SUCCESS;
}

 for (int axis = 0; axis < DMC2180_MAX_COUNTER_ENCODERS; axis++) {
                counterEncoder[axis].axisUsed = FALSE;
                counterEncoder[axis].axisLabel = AxisLabels[axis];
                counterEncoder[axis].axisIndex = axis;
                counterEncoder[axis].dmc2180 = this; //allows motor to access controller data
        }

